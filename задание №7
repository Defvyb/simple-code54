#include <iostream>
using namespace std;

template <typename T>
class List
{
public:
	List();
	~List();
	int Size;
	void push_back(T data);
	T& operator[](const int index);
	void Myfunction(List<int> lst, List <int> lst2, int E);
	void Delete_E(List<int> lst, int E);
	
private:
	template <typename T>
	class Node
	{
	public:
		T data;
		Node* pNext;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;
	
	
};
template <typename T>
List<T>::List()
{
	head = nullptr;
	Size = 0;
}
template <typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;

		}
		current->pNext = new Node<T>(data);

	}
	/*cout << data << endl;*/
	Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
	int count = 0;
	Node<T>* current = this->head;
	while (current != nullptr)
	{
		if (count == index)
		{
		   return current->data;
		}
		count++;
		current = current->pNext;
	}
}

template<typename T>
void List<T>::Myfunction(List<int> lst, List<int> lst2, int E)
{

	
	Node<T>* current = lst.head;
	Node<T>* current2 = lst2.head;
	
		while (current->data != E) 
		{
			current = current->pNext;
		}
		if (current->data == E)
		{
			while (current2->pNext != nullptr)
			{
				current->pNext = new Node<T>(current2->data);
				if (current->pNext == nullptr)
				{
					current->pNext = current2->pNext;
				}
				
				current = current->pNext;
				current2 = current2->pNext;
			}
			if (current2->pNext == nullptr)
			{
				current->pNext = new Node<T>(current2->data);
			}
		}
		
}
//
//template<typename T>
//void List<T>::Delete_E(List<int> lst, int E)
//{
//	Node<T>* previos = this->head;
//	while (previos->data !=E)
//	{
//		previos = previos->pNext;
//	}
//	if (previos->data == E)
//	{
//		Node<T>* temp = previos->pNext;
//		previos->pNext = temp;
//		delete temp;
//	}
//}

int main()
{
	setlocale(LC_ALL, "ru");
	
	int E;
	cout << "введите число Е: " << endl;
	cin >> E;
	List<int> lst;
	List<int> lst2;
	int n;
	cout << "введите количество элементов в 1 списке:" << endl;
	cin >> n;
	int num;
	while (n--)
	{
		cout << "введите элементы в 1 списке: " << endl;
		cin >> num;
		lst.push_back(num);
		if (n==rand()% 3)
		{
			lst.push_back(E);
		}
	}

	int n2;
	cout << "введите количество элементов в 2 списке:" << endl;
	cin >> n2;
	while (n2--)
	{
		cout << "введите элементы в 2 списке: " << endl;
		cin >> num;
		lst2.push_back(num);
	}
	
	for (int i = 0; i < lst.Size; i++)
	{
		cout << i <<"элемент первого списка(1 вызов) = "<< lst[i] << endl;
		
	}
	
	for (int i = 0; i < lst2.Size; i++)
	{
		cout << i << "элемент второго списка = " << lst2[i] << endl;
	}
	lst.Myfunction(lst, lst2, E);
	lst.Delete_E(lst, E);
	for (int i = 0; i < lst.Size+1; i++)
	{
		cout << i << "элемент первого списка(2 вызов) = " << lst[i] << endl;
	}

	return 0;
}
