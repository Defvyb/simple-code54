#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <locale.h>
using namespace std;

template <typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);
	T& operator [](const int index);
	bool Alphabet_List(List lst);

private:
	template <typename T>
	class Node
	{
	public:
		T data;
		Node* pNext;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;
	int Size;
};
template <typename T>
List<T>::List()
{
	head = nullptr;
	Size = 0;
}
template <typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)
{
	cin >> data;
	if (head == nullptr)
	{
		head = new Node<T>(data);
		
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}
	cout << data << endl;
	Size++;
}
template<typename T>
T& List<T>::operator[](const int index)
{
	int count = 0;
	Node<T>* current = this->head;
	while (current != nullptr)
	{
		if (count == index)
		{
			return current->data;
		}
		current = current->pNext;
		count++;
	}
}
template<typename T>
bool List<T>::Alphabet_List(List lst)
{
	Node<T>* current = this->head;
	int i = 0;	//Счётчик

	while (current->pNext != nullptr) //Пока в списке есть элементы
	{
		
			if (lst[i] < lst[i + 1])	//Если буква первого элемента по алфавиту стоит ПЕРЕД буквой второго элемента, то проверяем следующие элементы списка
			{
				current = current->pNext;
			}
			else if (lst[i] == lst[i + 1])	//Если первые буквы равны, проверяем следующие
			{
				current = current->pNext;
			}
			else	//Если буква первого элемента по алфавиту стоит ПОСЛЕ буквой второго элемента, то список не упорядочен по алфавиту
			{
				return 0;
			}
		
			i++;
		
	}
	return 1;
}


int main()
{
	setlocale(LC_ALL, "ru");

	List<string> lst;
	for (int i = 0; i < 5; i++)
	{
		lst.push_back("i");
	}
	/*lst.push_back("а");*/
	/*lst.push_back("а"); 
	lst.push_back("б");
	lst.push_back("б");*/
	cout << lst.Alphabet_List(lst) << endl;
	
	if (lst.Alphabet_List(lst) == 1)
		printf("Слова упорядочены по алфавиту");
	else
		printf("Слова упорядочены НЕ по алфавиту");

	return 0;
}
