#include <iostream>
#include <locale>
#include <string>

using namespace std;

//задание №2

template<typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);//вывод списка
	int GetSize() { return Size; }//размер списка
	T& operator[](const int index);//функция проверки любого элемента списка
	bool print(List lst, List lst2);//функция проверки равенства элементов двух списков
	

	
	
private:
	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T>* head;
	
};

template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}

template<typename T>
List<T>::~List()
{

}

template<typename T>
void List<T>::push_back(T data)
{
	if (head== nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
			
		}
		current->pNext = new Node<T>(data);
		
	}
	/*cout << data << endl;*/
	Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
	int counter=0;
	Node<T>* current = this->head;
	while (current!=nullptr)
	{
		if (counter == index)
		{
			return current->data;
		}
		current = current->pNext;
		counter++;
	}
	
}

template<typename T>
bool List<T>::print(List lst, List lst2)
{
	
	
	Node<T>* current = lst.head;
	Node<T>* current2 = lst2.head;
	while(current->pNext!=nullptr && current2->pNext != nullptr)
	{
		for (int i = 0; i < 2; i++)
		{
			if (current->data == current2->data)
			{
				cout << i << " " << "элемент 1 списка равен" << " " << i << " " << "элементу второго списка" << endl;
				current = current->pNext;
				current2 = current2->pNext;
			}
			else
			{
				cout << i << " " << "элемент 1 списка не равен " << " " << i << " " << "элементу второго списка" << endl;
				current = current->pNext;
				current2 = current2->pNext;
			}

		}
		
		
	}
	return 0;
}

void ASSERT_FALSE(bool result, char * caseName)
{
    if(true == result)
    {
        std::cout << "case " << caseName << " NOT passed" << std::endl;
	return;
    }
    std::cout << "case " << caseName << " passed" << std::endl;
}

int main()
{
	setlocale(LC_ALL, "ru");
	
	{
		List<int> lst;
		List<int> lst2;
		ASSERT_FALSE(lst == lst2, "Кейс, списки пустые");
	}
	
	{
		List<int> lst;
		List<int> lst2;
		
		lst2.push_back(5);
		
		ASSERT_FALSE(lst == lst2, "Кейс, список 1 пустой");
	}
	
	{
		List<int> lst;
		List<int> lst2;
		
		lst.push_back(5);
		
		ASSERT_FALSE(lst == lst2, "Кейс, список 2 пустой");
	}


	return 0;
}
