#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <locale.h>

constexpr auto MAX_SIZE = 25;

struct List
{
	char s[MAX_SIZE];
	List* next;
	List(char sv[MAX_SIZE] = NULL, List* p = NULL) // Конструктор 
	{
		strcpy_s(s, sv);
		next = p;
	}
};

List* Add_last(char s[MAX_SIZE], List* head) //Добавление элемента в конец списка
{
	List* q = new List(s), * p = head;

	if (head == NULL)
		return q;
	while (p->next != NULL)
		p = p->next;
	p->next = q;
	return head;
}

List* Enter_List()	//Ввод списка
{
	char s[MAX_SIZE];
	List* head = NULL;
	for (;;)
	{
		gets_s(s);
		if (s[0] == '\0')
			break;
		head = Add_last(s, head);
	}
	return head;
}


bool Alphabet_List(List* l1)
{
	List* l1next = l1->next;	//Следующий элемент списка L1
	int i = 0;	//Счётчик

	while (l1next != NULL) //Пока в списке есть элементы
	{
		while (l1->s[i] != '\0' || l1next->s[i] != '\0')	//Пока в элементах есть буквы
		{
			if (l1->s[i] < l1next->s[i])	//Если буква первого элемента по алфавиту стоит ПЕРЕД буквой второго элемента, то проверяем следующие элементы списка
				break;
			else if (l1->s[i] == l1next->s[i])	//Если первые буквы равны, проверяем следующие
				i++;
			else	//Если буква первого элемента по алфавиту стоит ПОСЛЕ буквой второго элемента, то список не упорядочен по алфавиту
				return 0;
		}
		i = 0;
		l1 = l1->next;
		l1next = l1next->next;
	}
	return 1;
}

int main()
{
	List* l1;

	setlocale(LC_ALL, "Russian");
	
	printf("Программа проверяет упорядочены ли элементы списка по алфавиту.\n\n");
	printf("Ввод L1:\n");
	l1 = Enter_List();
	if (l1 == NULL) //Проверка пустого списка
	{
		printf("Список пуст!");
		return 0;
	}
	if (Alphabet_List(l1) == 1)
		printf("Слова упорядочены по алфавиту");
	else
		printf("Слова упорядочены НЕ по алфавиту");

	return 0;
}
